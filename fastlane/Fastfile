# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.68.0"

module ARTEFACT_TYPE
  IOS = 1
  ANDROID = 2
end

default_platform :android

platform :android do
  before_all do |lane|
    lanes_to_slack = [:push, :deploy, :dev]
    if lanes_to_slack.include?(lane)
      ENV["SLACK_URL"] = ENV["SLACK_HANDLE_URL"]
    end
    if ENV["LOCAL"] == false
      ensure_git_status_clean
    end

    if [:push, :deploy].include?(lane)
      ENV["ANDROID_APK_PATH"] = ENV["TRAVIS_BUILD_DIR"] + "/android/app/build/outputs/apk/release/DigiHrApp-release.apk"
    end
  end

  def version_code
    # return increment_build_number(build_number: ENV['CI_BUILD_ID']);
    return sh("git rev-list HEAD --first-parent --count")
  end

  def version_number
    path = '../package.json'
    re = /("version"): ("\d+(\.\d+)+")/

    s = File.read(path)
    versionName = s[re, 2].gsub! '"', ''
    return versionName
  end

  def app_name
    path = '../package.json'
    re = /("name"): ("\w+")/

    s = File.read(path)
    appName = s[re, 2].gsub! '"', ''
    return appName
  end

  def post_build_to_slack(build_file, type, build_title, file_full_path)
    slack_token = ENV["POST_ARTEFACTS_TOKEN"]

    # Android Block!
    if type == ARTEFACT_TYPE::ANDROID
      sh("echo Uploading `" + build_title + "` to Android builds")
      curl_cmd = "curl https://slack.com/api/files.upload -F token=\""
                  + slack_token + "\" -F channels=\"" + ENV["SLACK_ANDROID_BUILDS_CHANNEL"]
                  + "\" -F title=\"" + build_title + "\" -F filename=\"" +
                  build_file + "\" -F file=@" + file_full_path +
                  " -F filetype=apk -F num_stars=5 -F is_starred=true"
      sh(curl_cmd)
    end

    # iOS Block!
    if type == ARTEFACT_TYPE::IOS
      sh("echo Uploading `" + build_title + "` to iOS builds")
      curl_cmd = "curl https://slack.com/api/files.upload -F token=\""
                  + slack_token + "\" -F channels=\"" + ENV["SLACK_IOS_BUILDS_CHANNEL"]
                  + "\" -F title=\"" + build_title + "\" -F filename=\"" +
                  build_file + "\" -F file=@" + file_full_path +
                  " -F filetype=ipa -F num_stars=5 -F is_starred=true"
      sh(curl_cmd)
    end
  end

  def tag_build_and_push(distribution)
    add_git_tag(
      grouping: "releases",
      build_number: version_number + "-" + distribution
    )

    push_git_tags

    changelog_from_git_commits(
      merge_commit_filtering: 'exclude_merges' # Optional, lets you filter out merge commits
    )

  end

  def create_artifact
    puts "Assembling release artifact (apk) with: " + version_number
    gradle(
      project_dir: "./android",
      task: "assembleRelease -x lint",
      properties: {
        "versionCode" => version_code,
        "packageFilePath" => "package.json",
        "store_file" => ENV["TRAVIS_BUILD_DIR"] + "/fastlane/Certificates/" + ENV["KEYSTORE_FILE_NAME"],
        "store_file_password" => ENV["KEYSTORE_PASSWORD"],
        "store_alias" => ENV["KEYSTORE_ALIAS"],
        "store_password" => ENV["KEYSTORE_ALIAS_PASSWORD"],
        "CRASHLYTICS_API_KEY" => ENV["CRASHLYTICS_API_KEY"]
      }
    )
  end

  def clean_build_analyze(lane)
      if lane == "local_dev"
        puts "Clean node_modules, sonarqube and as well as build directories."
        sh("rm -rf ../node_modules ../android/build ../android/app/build ../android/.sonarqube ../js/.sonarqube")

        puts "Install node modules."
        sh("yarn install")
      end

      puts "Build app."
      gradle(
        project_dir: "./android",
        task: "build -x lint",
        properties: {
          "versionCode" => version_code,
          "packageFilePath" => "package.json"
        }
      )
  end

  def run_tests
    puts "Run unit (jest) tests"
    sh("npm test")
    # puts "Run sonnar qube analysis on react-native app and as well as android app"
    # run_sonarqube
  end

  def run_sonarqube
      sonar(
	      project_configuration_path: File.expand_path("../js/sonar-project.properties")
      )
      gradle(
        project_dir: "./android",
        task: "sonarqube",
        properties: {
          "packageFilePath" => "package.json"
        }
      )
  end

  desc "It performs cleans, build, package and code analysis"
  desc "It cleans node_modules, sonarqube and as well as build directories."
  desc "It also Installs node_modules, build, run unit tests and assemble the release."
    lane :local_dev do

    clean_build_analyze("local_dev")
    run_tests
  end

 desc "It performs cleans, build, package and code analysis"
 desc "It cleans node_modules, sonarqube and as well as build directories."
 desc "It also Installs node_modules, build, run unit tests and assemble the release."
    lane :dev do

    clean_build_analyze("dev")
    run_tests
  end

 desc "It runs dev tasks (clean, build etc.)"
 desc "It tags the build before submitting to beta release.)"
 desc "Deploys a beta version to the Crashlytics for the test flight."
  lane :push do | options |

    # clean_build_analyze("push")
    run_tests
    create_artifact

    if options[:distribution]

        puts "Tags the build using versionCode defined in gradle file, push the tag to remote and generate change log."
        dist = options[:distribution]
        # tag_build_and_push(dist)

        puts "Submit a new Beta Build to Crashlytics Beta."

        distribution_list = ["digi-cr-users"]
        if dist.eql? "beta"
           distribution_list.push("customers")
        end

        crashlytics(
          api_token: ENV["FABRIC_ORG_API_KEY"],
          build_secret: ENV["FABRIC_ORG_BUILD_SECRET"],
          groups: distribution_list,
          #  notes_path: "./release-notes.txt"
          # apk_path: "./android/app/build/outputs/apk/" + app_name + "-" + version_number + ".apk",
          apk_path: ENV["ANDROID_APK_PATH"],
          # crashlytics_path: "..." Path to `crashlytics-devtools.jar` file
          #  emails: "exact.titankl@gmail.com, bastiaan.bakker@exact.com, luca.temperini@exact.com, toine.hurkmans@exact.com",
          notifications: "true",
          debug: "false"
        )
    end
  end

  desc "Deploys a new version to the Google Play"
  lane :deploy do
    gradle(task: "assembleRelease")
    supply
  end

  desc "Please checkout our Slack channel for notification about build and deployments"
  after_all do |lane|
    # This block is called, only if the executed lane was successful
    lanes_to_slack = [:push, :deploy, :dev]
    if lanes_to_slack.include?(lane)
      if [:push].include?(lane)
        slack(
          message: "*New version has been pushed to crashlytics as well as under android build section* :snowboarder:",
          success: true,        # optional, defaults to true
          payload: {            # optional, lets you specify any number of your own Slack attachments
            'Version' => "`" + version_number + "`",
            'Build Date' => "`" + Time.new.to_s + "`",
            'Built by' => "`Travis-CI`"
          },
          default_payloads: [:lane, :test_result, :git_author, :git_branch, :last_git_commit],
        )
        post_build_to_slack("DigiAltHR-v" + version_number + ".apk", ARTEFACT_TYPE::ANDROID, "Version `" + version_number + "`", ENV["ANDROID_APK_PATH"])
      else
        slack(
          message: "*Build succeeded!* :honey_pot:",
          success: true,        # optional, defaults to true
          payload: {            # optional, lets you specify any number of your own Slack attachments
            'Build Date' => "`" + Time.new.to_s + "`",
            'Built by' => "`Travis-CI`"
          },
          default_payloads: [:lane, :test_result, :git_author, :git_branch, :last_git_commit],
        )
      end
    end
  end

  error do |lane, exception|
    lanes_to_slack = [:push, :deploy, :dev]
    if lanes_to_slack.include?(lane)
      slack(
        message: exception.message,
        success: false
      )
    end
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is sent or shared. Learn more at https://github.com/fastlane/enhancer
