# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.3.1"

require 'json'

$settings_file = File.read('../build_config/android/build.json')
$settings_hash = JSON.parse($settings_file)

default_platform :android

platform :android do
  before_all do
    update_fastlane
    ENV["SLACK_URL"] = slack_url
  end

  def slack_url
    return $settings_hash['slack']['handle_url']
  end

  def version_code
    # return increment_build_number(build_number: ENV['CI_BUILD_ID']);
    return sh("git rev-list HEAD --first-parent --count")
  end

  def version_number
    path = '../package.json'
    re = /("version"): ("\d+(\.\d+)+")/

    s = File.read(path)
    versionName = s[re, 2].gsub! '"', ''
    return versionName
  end

  def app_name
    path = '../package.json'
    re = /("name"): ("\w+")/

    s = File.read(path)
    appName = s[re, 2].gsub! '"', ''
    return appName
  end

  def tag_build_and_push(distribution)
    add_git_tag(
      grouping: "releases",
      build_number: version_number + "-" + distribution
    )

    push_git_tags

    changelog_from_git_commits(
      merge_commit_filtering: 'exclude_merges' # Optional, lets you filter out merge commits
    )

  end

  def clean_build_analyze
        puts "Clean node_modules, sonarqube and as well as build directories."
        sh("rm -rf ../node_modules ../android/build ../android/app/build ../android/.sonarqube ../js/.sonarqube")

        puts "Install node modules."
        sh("yarn install")

        puts "Build app."
        gradle(
          project_dir: "./android",
          task: "build -x lint",
          properties: { 'versionCode' => version_code, "packageFilePath" => "package.json" }
        )

        puts "Run unit (jest) tests"
        sh("yarn test")

        puts "Assembling release artifact (apk) with: " + version_number
        gradle(
          project_dir: "./android",
          task: "assembleRelease -x lint",
          properties: {
            "versionCode" => version_code,
            "packageFilePath" => "package.json"
          }
        )

        puts "Run sonnar qube analysis on react-native app and as well as android app"
        run_sonarqube
  end


  def run_sonarqube
      sonar(
	      project_configuration_path: File.expand_path("../js/sonar-project.properties")
      )
      gradle(
        project_dir: "./android",
        task: "sonarqube",
        properties: {
          "packageFilePath" => "package.json"
        }
      )
  end

 desc "It performs cleans, build, package and code analysis"
 desc "It cleans node_modules, sonarqube and as well as build directories."
 desc "It also Installs node_modules, build, run unit tests and assemble the release."
    lane :dev do

    clean_build_analyze
  end

 desc "It runs dev tasks (clean, build etc.)"
 desc "It tags the build before submitting to beta release.)"
 desc "Deploys a beta version to the Crashlytics for the test flight."
  lane :push do | options |

    clean_build_analyze

    if options[:distribution]

        puts "Tags the build using versionCode defined in gradle file, push the tag to remote and generate change log."
        dist = options[:distribution]
        tag_build_and_push(dist)

        puts "Submit a new Beta Build to Crashlytics Beta."

        distribution_list = ["stock-count-participator"]
        if dist.eql? "beta"
           distribution_list.push("customers")
        end

        crashlytics(
          api_token: "",
          build_secret: "",
          groups: distribution_list,
        #  notes_path: "./release-notes.txt"
        apk_path: "./android/app/build/outputs/apk/" + app_name + "-" + version_number + ".apk",
        # crashlytics_path: "..." Path to `crashlytics-devtools.jar` file
        #  emails: "exact.titankl@gmail.com, bastiaan.bakker@exact.com, luca.temperini@exact.com, toine.hurkmans@exact.com",
        notifications: "true",
        debug: "false"
      )
    end
  end

  desc "Deploys a new version to the Google Play"
  lane :deploy do
    gradle(task: "assembleRelease")
    supply
  end

  desc "Please checkout our Slack channel 'titan_kl_notification' for notification about build and deployments"
  after_all do |lane|
    # This block is called, only if the executed lane was successful
    slack(
      message: "*We are going places!* :snowboarder:",
      success: true,        # optional, defaults to true
      payload: {            # optional, lets you specify any number of your own Slack attachments
        'Version' => "`" + version_number + "`",
        # 'What\'s new' => release_notes,
        'Build Date' => "`" + Time.new.to_s + "`",
        'Built by' => "`Jenkins`",
        'Please download' => "http://yet-to-be-decided-url.com"
      },
      default_payloads: [:lane, :test_result, :git_author, :git_branch, :last_git_commit],
    )
  end

  error do |lane, exception|
    slack(
      message: exception.message,
      success: false
    )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is sent or shared. Learn more at https://github.com/fastlane/enhancer
