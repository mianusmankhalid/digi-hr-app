apply plugin: "com.android.application"

if (getFabricApiKey() != "") {
    apply plugin: "io.fabric"
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

project.ext.vectoricons = [
    iconFontNames: [ 'MaterialIcons.ttf' ] // Name of the font files you want to copy
]
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

import com.android.build.OutputFile
import groovy.json.JsonSlurper

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/* Custom methods */

project.ext {
    appName = getNpmName()
}

/* Calculated from git commits to give sequential integers */
def getGitVersion() {
    try
    {
      def process = "git rev-list HEAD --first-parent --count".execute()
      return process.text.toInteger()
    }
    catch (all)
    {
      return 0;
    }
}
// Get the version defined in package.json
def getNpmVersion() {
   def packageFile = "../package.json"
    if(project.hasProperty('packageFilePath') && packageFilePath != "" ) {
        packageFile = packageFilePath
    }

    def inputFile = new File(packageFile)
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson["version"]
}
// Gets the app name from package.json
def getNpmName() {
   def packageFile = "../package.json"
    if(project.hasProperty('packageFilePath') && packageFilePath != "" ) {
        packageFile = packageFilePath
    }

    def inputFile = new File(packageFile)
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson["name"]
}
// Gets the release package name from package.json
def getReleasePackageName() {
    def packageFile = "../package.json"
    if(project.hasProperty('packageFilePath') && packageFilePath != "" ) {
        packageFile = packageFilePath
    }

    def inputFile = new File(packageFile)
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson["release_package_name"]
}
// Gets the fabric key stored in properties
def getFabricApiKey() {
  if(project.hasProperty('CRASHLYTICS_API_KEY') && CRASHLYTICS_API_KEY != "" ) {
      return CRASHLYTICS_API_KEY
  }
  return ""
}

def getKeyStoreFilePath() {
  if(project.hasProperty('store_file') && store_file != "" ) {
      return store_file
  }
  return "../../fastlane/Certificates/debug.keystore"
}

def getKeyStoreFilePassword() {
  if(project.hasProperty('store_file_password') && store_file_password != "" ) {
      return store_file_password
  }
  return "debug123"
}

def getKeyStoreAlias() {
  if(project.hasProperty('store_alias') && store_alias != "" ) {
      return store_alias
  }
  return "debug"
}

def getKeyStorePassword() {
  if(project.hasProperty('store_password') && store_password != "" ) {
    return store_password
  }
    return "debug123"
}
/* Custom methods */

android {
    compileSdkVersion 23
    buildToolsVersion '26.0.0'
    project.archivesBaseName = appName;

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId getReleasePackageName()
        minSdkVersion 16
        targetSdkVersion 22
        versionCode getGitVersion()
        versionName getNpmVersion()
        manifestPlaceholders = [
          npmVersionCode:getNpmVersion(),
          fabricApiKey:getFabricApiKey()
        ]
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            storeFile file(getKeyStoreFilePath())
            storePassword getKeyStoreFilePassword()
            keyAlias getKeyStoreAlias()
            keyPassword getKeyStorePassword()
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    //output.outputFileName = new File(output.outputFile.parent, "app-release.apk");
                    // def betaName = output.outputFile.name
                    // def betaString = "-" + getNpmVersion()
                    // betaName = betaName.replace("-release", betaString)
                    // output.outputFileName = new File(output.outputFile.parent, betaName)
                }
            }
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-i18n')
    compile project(':react-native-google-analytics-bridge')
    compile project(':react-native-fabric')
    compile project(':react-native-vector-icons')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:answers:1.4.1@aar') {
        transitive = true;
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
